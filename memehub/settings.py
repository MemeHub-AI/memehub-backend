"""
Django settings for memehub project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY", '1234567890')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("ENVIRONMENT").lower() == 'dev'

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'channels',
    'apps.resource',
    'apps.real_data',
    'apps.user',
    'apps.coin',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'memehub.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'memehub.wsgi.application'
ASGI_APPLICATION = 'memehub.asgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "resource": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": os.getenv("RESOURCE_DB_NAME"),
        "USER": os.getenv("RESOURCE_DB_USER"),
        "PASSWORD": os.getenv("RESOURCE_DB_PASSWORD"),
        "HOST": os.getenv("RESOURCE_DB_HOST"),
        "PORT": os.getenv("RESOURCE_DB_PORT", "3306"),
    },
    'default': {
        "ENGINE": "django.db.backends.mysql",
        "NAME": os.getenv("MASTER_DB_NAME"),
        "USER": os.getenv("MASTER_DB_USER"),
        "PASSWORD": os.getenv("MASTER_DB_PASSWORD"),
        "HOST": os.getenv("MASTER_DB_HOST"),
        "PORT": os.getenv("MASTER_DB_PORT", "3306"),
    }
}

DATABASE_ROUTERS = ['memehub.database_router.DatabaseAppsRouter']


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# pagesize
PAGE_SIZE = 20
MAX_PAGE_SIZE = 100

# s3 config
AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
AWS_ACCESS_SECRET_KEY = os.getenv("AWS_ACCESS_SECRET_KEY")
REGION_NAME = os.getenv("AWS_REGION_NAME")
BUCKET_NAME = os.getenv("AWS_BUCKET_NAME")

# jwt salt
SALT = os.getenv("JWT_PRIVATE_KEY")
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# data middleware
KAFKA_URL = os.getenv("KAFKA_URL")

RABBIT_HOST = os.getenv("RABBIT_HOST", "127.0.0.1")
RABBIT_SECRET = os.getenv("RABBIT_SECRET", "guest")
RABBIT_PORT = os.getenv("RABBIT_PORT")

# chain data

CHAINLIST = {
    "eth": {"id": "1", "name": "ethereum", "rpc": "https://ethereum-rpc.publicnode.com"},
    "scroll": {"id": "534352", "name": "scroll", "rpc": "https://rpc.ankr.com/scroll"},
}

SCANNER_URL = {
    "eth": "https://etherscan.io",
    "scroll": "https://scrollscan.com",
}


# cache config
REDIS_HOST = os.getenv("REDIS_HOST", "127.0.0.1")
REDIS_PWD = os.getenv("REDIS_PWD", "123456")

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://{REDIS_HOST}:6379/{REDIS_PWD}",
        "OPTIONS": {"CLIENT_CLASS": "django_redis.client.DefaultClient"},
    }
}

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer",
    },
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'WARNING',
        },
    },
}
